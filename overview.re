= Couchbase Serverとは何か？

== Couchbase Server発展史

=== インメモリKVSからJSONデータベースへ

2012年にリリースされたCouchbase Server 2.0により、Membaseを前身とするCouchabse Serverは、純粋なキーバリューストア(KVS)から、JSONデータベース(ドキュメント指向データベース)へと発展を遂げました。

ドキュメント指向データベースであるCouchbase Serverは、JSONデータを扱うために必要な機能を提供している一方、キーバリューストアとしての側面は残しており、JSON以外のデータをバリューとして格納することも可能です。また、memcachedのように、揮発性のキャッシュとして利用するためのオプションも提供しています(デフォルトではデータをディスクに永続化します)。永続化機構において、メモリファーストアークテクチャーが採用されており、データ操作（リード・ライト）において、ミリ秒以下の応答性能を実現しています。

上に素描したCouchbase Serverのコア機能は、Dataサービスと呼ばれます。


====[column]本書におけるサービス名表記方針
Couchbase Serverは、Dataサービスをはじめとする複数のサービスから構成されています。本書では、一般名詞と明確に区別するため、「Dataサービス」のようにサービスの名称には英語表記を用いています。

====[/column]

=== クエリ

Couchbase Server 4.0にて、N1QL(Non 1-st Normalization form Query Language)が導入され、Couchbase Serverに格納されているデータに対して、SQL準拠のクエリ言語を用いてアクセスすることができるようになりました。N1QLは、非第一正規化形クエリ言語という意味を持ち、ニッケルと発音します。

N1QLによるクエリは、QueryサービスとIndexサービスで実現されます。

=== 全文検索

Couchbase Server 5.0にて、全文検索機能(Searchサービス)が導入されました。全文検索機能は、テキストデータに対する単語レベルのインデックス化による全文検索機能に加え、検索語との関連性に応じて文書をスコアリングし検索結果をソートしたり、検索結果中の該当箇所をハイライトするために必要なデータを合わせて提供するといったアプリケーションに検索機能を実装するために使うことのできる機能が備わっています。

Couchbase Server 6.6にて、全文検索機能をN1QLクエリから直接利用することができるFlexインデックスが導入されています。

====[column]本書におけるSearchサービスの扱い
Couchbase Server利用において、全文検索のユースケースは、必ずしも中心的なユースケースとは言えないため、本書では、Searchサービスについては扱いません。

====[/column]

=== イベント処理
Couchbase Server 5.5にて、イベント処理機能(Eventingサービス)が導入されました。ユーザーは、イベントーコンディションーアクション・モデルに基づいてトリガーされるJavaScriptを用いたユーザー定義関数を利用できるようになりました。ユーザーは、Couchbase Server内のデータ更新・削除（イベント）に対して、条件（コンディション）と、それに対するユーザー定義関数（アクション）を定義します。ユーザ定義関数では、Couchbase Serverのデータに対する操作のほか、REST APIコールによる外部サービス呼び出しを実行することが可能です。

====[column]エディションによる差異
Eventingサービスは、エンタープライズ エディションでのみ利用可能です。

====[/column]

=== アナリティクス

Couchbase Server 6.0にて、Analyticsサービスが導入されました。この新しいサービスの導入により、Couchbase Serverは、OLTP(Online Transaction Processing)とOLAP(Online Analytical Processing)をシングルプラットフォームで実現するHTAP(ハイブリッドトランザクション・アナリティカル・プロセッシング)環境として利用可能になりました。OLTP環境とOLAP環境を統合するためにETL処理を実装する必要はありません。また、分析用にデータのスキーマを変更する必要はありません。Couchbase Serverをバックエンドデータベースとして利用しているアプリケーションのパフォーマンスを妨げることなく、ニアリアルタイムのデータを用いたアドホックな分析を行うことが可能です。

Analyticsサービスは、アドホックな分析要件に適した形でデータを保持しています。また、MPP（マッシブ・パラレル・プロセッシング）の最新の成果が用いられており、大量のヒストリカルデータの集計が必要とされるような分析要件に対して、高い応答性能を実現しています。

Analyticsサービスが分析対象として扱う範囲は、従来Analyticsサービスがその一部であるクラスター内部のデータのみでしたが、Couchbase Server 6.6からは、外部のCouchbase Serverクラスターのデータ、およびS3ベースのデータにまで拡張されました。

外部のBIツールから、AnalyticsサービスへアクセスするためのODBC/JDBCドライバーが、CDATA@<fn>{1433ffe25ca932a2c5c0242cfc86b3e3}社から提供されています。

====[column]エディションによる差異
Analyticsサービスは、エンタープライズ エディションでのみ利用可能です。

====[/column]

=== スコープとコレクション

Couchbase Server 7.0において、バケット内のキースペースとして、スコープとコレクションが導入されました。
コレクションが導入される前は、Couchbase Serverには、RDBにおけるテーブルスキーマに相当するものがないため、データの種類を表現するためには、ドキュメントの内部情報としてデータの種類に関する情報を持つ必要がありました。コレクションは、RDBにおけるテーブルスキーマのように、データの構造について制約するためのものではないため、スキーマレスであることの柔軟性は失われません。

スコープとコレクションの導入により、RDBで管理されているデータをCouchbase Serverに移行することが、これまでと比べて、より簡単に直接的に行えるようになりました。

「コレクション」という表現は、プログラミングの分野でデータ構造を表す用語として広く浸透しているため、一般的な開発者にとってはデータベースに用いられていることに違和感があるかもしれませんが、MongoDBでもドキュメントの格納単位として「コレクション」という用語が用いられており、同じドキュメント指向データベースとして、いたずらに異なる用語を導入するよりも合理的ともいえるかと思います（MongoDBではスコープに相当する機能は存在していません）。

また、Couchbase Server 7.0では、Backupサービスが導入されました。それまでのCouchbase Serverでは、バックアップ機能はコマンドラインツールとして提供されていましたが、Backupサービスの導入により、スケジューリングや、WEBコンソールからの設定が可能になりました。

== NoSQLと現在の技術動向

NoSQLというキーワードが登場してから、長い年月が経ちました。ここでは、NoSQLという技術の現在について整理します。

まずは、現在の情報技術を取り巻く環境について、振り返ることから始めます。

=== DX (Digital Transformation)

デジタルトランスフォーメーション、DXについて、経済産業省資料『「DX推進指標」とそのガイダンス』@<fn>{meti_go_jp_dx}では、以下のように定義されています。

//quote{

企業がビジネス環境の激しい変化に対応しデータとデジタル技術を活用して、
顧客や社会のニーズを基に製品やサービス、ビジネスモデルを変革するとともに
業務そのものや組織、プロセス、企業文化・風土を変革し競争上の優位性を確立すること

//}

ここで、トランスフォーメーション、つまり変革の対象とされているものは二つあります。一つは、企業が生み出し、顧客に提供する製品やサービス、そしてもう一つは、企業内部の業務プロセスです。
そして、この変革は、「顧客や社会のニーズを基に」したものであるとされています。

極めて、当たり前のことが語られているようにみえます。一方で、こう考えることもできるのではないでしょうか、つまり、これまでも確かに情報技術によって変革が行われてきた、ただしそれは(十分に)「顧客や社会のニーズ」に基づくものではなかった、と。

=== SoE (System of Engagement)

SoE、エンゲージメント（のため）のシステム。つまりユーザーとの「つながり」を掲げたシステム。この「SoE」が語られる文脈では、旧来からあるシステムは、SoR（システムオブレコード）、「記録」（のため）のシステム、と呼ばれることになります。

ここで重要なのは、SoRとSoEとの線引きは、「更新系」と「参照系」という古のシステム区分とは異なるということです。「更新系」と「参照系」との関係では、「参照系」システムは、いわば「更新」以外の領域として見出されており、それらはシステムの「機能」から見た区分であるといえます。SoEとSoRとの差異は、システムの「目的」、さらにいえば、システムがどのような背景から発想されているか、にあるといえます。

新しい言葉の誕生に立ち会う時、私たちは、その概念が登場する前の風景がどういったものだったか、に思いを巡らすことになります。これまでの（私たちにとって当たり前と思われていた）システムは、（その時点の技術でできること、つまり）システムにとって得意なことから発想されており、ユーザー（とのエンゲージメント）から発想されたものでなかった、そう考えることも出来そうです。

=== NoSQLの登場まで

NoSQL登場以前には、データベースの分類といった時、RDBとDWH（データウェアハウス）という区分が、最も定番といえるものでした。そしてそれは、基盤系と情報系というシステムの分類に対応していました。また、OLTP（OnLine Transaction Processing）とOLAP（OnLine Analytical
Processing）という用語を、ここで思い起こしても良いでしょう。

NoSQL（NOまたは、Not Only SQL）という言葉の登場により、データベースの分類に、混乱が招き入れられました。実際「従来のものと異なる」という表現は、カテゴリーとして意味のあるものではなく、純粋なバズワードとして機能することしかできないのは当然でした。乱暴に言えば、NoSQLは、「ビッグデータ」との組み合わせによる類推から（蓄えられたヒストリカルデータの利用という観点から）、広い意味で「情報系」というカテゴリーに投げ入れられることになったとさえいえます。その意味で、結局「Nice
To Have」であり、いたずらにDWHよりも複雑なもの、という印象に終始したとさえいえるでしょう（あるいは、極端な断言かもしれませんが、一つの見方として受け止めていただければと思います）。

=== SoEとNoSQL

ここで、DXの隆盛を鑑みつつ、SoEのひそみにならって、エンゲージメントのためのデータベース、というものを考えてみたいと思います。

エンゲージメントのためのシステムにふさわしいデータプラットフォームとはどのようなものでしょうか？SoEとSoRの境界を考えてみる時、例えば、ネットショッピングにおけるユーザの行動という視点から次のようにイメージすることができます。

 * SoRの範囲：商品購買・決済

 * SoEの範囲：商品の検索、推薦、カート保管、レビューなど

上記のイメージを援用すれば、ネットショッピングという限定を外して考えても、多くのアプリケーションがSoEの範囲に含まれることがわかるのではないかと思います。

ここで、SoEとSoRの間のシステムの性格の違いとして、以下の３点を挙げたいと思います。

 * @<strong>{ユーザーの規模感} システムを利用するユーザーの規模は、SoRの非ではない。さらにシステムは、増え続けるユーザー数・利用量に、対応していく必要がある
 * @<strong>{サービスの柔軟性} 新しいサービスを素早くリリースすることが重要。また、サービスは常に環境、つまりユーザーとの関係の変化に応じて更新されなければならない
 * @<strong>{要求される応答速度} サービスの多様化に合わせて、システムは複雑になり続ける。それに応じて、システムの各構成要素、例えば、データプラットフォームの応答速度として許容される時間は短くなる

そして、これらは「NoSQL」と呼ばれるデータベースの以下の技術要素にそれぞれ対応している、ということがいえます。

 * @<strong>{分散アーキテクチャー} 多くのNoSQL（およびNewSQL）データベースが共通して分散アーキテクチャーという特徴をもっています（ただし、そのスケールに対する柔軟性については、それぞれ違いがあります）。

 * @<strong>{スキーマレス} スキーマレスという特徴も、多くのNoSQLに共通しています。任意のキーを用いてデータを格納するキーバリューストア（例えば、Redis）と、列指向データベース（例えばHBase、Cassandra）、JSONというツリー構造のデータ記述フォーマットを用いるドキュメント指向データベース(例えば、MongoDB)は、全てNoSQLに分類されますが、スキーマレスという共通の特徴を持ちます。データ構造の柔軟性についていえば、ドキュメント指向データベースには、ツリー構造を表現でき、アプリケーションのデータ（ビジネスドメインオブジェクト）をそのまま格納することのできる、という他のデータベースにはない利点があります。
 * @<strong>{インメモリ} インメモリについては、オープンソースのNoSQLとしては、Redisが代表的と言えます。一般には、インメモリデータベースは、（単体でアプリケーションのキャッシュとして用いるのでなければ）永続化層を担う他のデータベースと組み合わせて利用することによって、高い応答性能という特性を持つデータプラットフォームを実現することができます。

=== SoEのためのデータベースとしてのCouchbase Server

Couchbase Serverは、上で述べてきた３つの技術的要素を全て実現しており、エンゲージメントのためのデータベースとして相応しい特徴を兼ね備えている、といえます。

NoSQLにカテゴライズされるデータベースには、それぞれ、ビッグデータの集計処理や、リアルタイムかつ大量データの投入等のように、異なった典型的なユースケースがあります。
Couchbase Serverは、データに対して、リード/ライトの両方のアクセスを、低遅延で実現する必要のある（つまり、インタラクティブな）アプリケーションのバックエンドとして用いられるために設計（最適化）されており、エンゲージメントのためのシステムのバックエンド・データプラットフォームとして用いるのに相応しいといえます。

== メモリーファーストアーキテクチャー

=== インメモリDBと永続化

ここでは、Couchbase Serverのメモリーファーストアーキテクチャーについて理解するため、まずインメモリDBという技術一般について検討します。その具体的な実現としてOracl CoherenceとRedisを取り上げます。これらは、インメモリ分散KVS(キーバリューストア)というカテゴリーに入ります。また、全てコミュニティエディションの存在するOSSベースのソフトウェアでもあります。

「インメモリ」というキーワードで、端的に連想されるのは、あるいはパフォーマンスということになるかもしれませんが、ここではより具体的に、応答性能に焦点を当てて検討してみたいと思います。また、「データをメモリに格納」という表現のみでは、訴求内容が十分明確でないかもしれないという点を考慮して、「永続化装置の性能がボトルネックにならない」という観点を強調したいと思います。


=== データ永続化パターン

インメモリDBを、単にアプリケーション層のキャッシュを実現するだけの「分散キャッシュ」と呼ばれるものと区別して考える場合、データの永続化という課題が浮かび上がります。

ここで、データ永続化には以下のようなパターンがあります。

 * @<strong>{キャッシュ・アサイド} アプリケーションは、データへの要求を受けた際に、データがキャッシュの中にあるか調べ、なければデータベースからロードし、将来の別の要求のためにキャッシュの中に保存する。

 * @<strong>{リード・スルー} キャッシュ層が、アプリケーションにとってのインターフェイスとして、データの読み込み要求を受けた際に、そのデータがキャッシュの中にあるかどうかを調べ、なければデータベースからロードし、将来の別の要求のためにキャッシュの中に保存する。この構成により、キャッシュ層における最適化（例えばデータのプリフェッチ）も可能になる。

 * @<strong>{ライト・スルー} キャッシュ層が、アプリケーションにとってのインターフェイスとして、データへの書き込み要求を受けた際に、データベースへの書き込みと、キャッシュの更新を同時に行う。

 * @<strong>{ライト・ビハインド} キャッシュ層がアプリケーションのインターフェイスとなるのは、ライト・スルーと同様だが、キャッシュ層にキュー/スレッドを備え、アプリケーションとキャッシュ層との関係（レスポンスタイム、スケーラビリティ）と、データベースとの関係を非同期とする。このことで、同一エントリへの複数の更新がバッチとしてまとめられる、データベースの障害との直接の影響関係を取り除く、などの利点が生じる。

=== データ復旧アプローチ

データ永続化の課題を、（キャッシュ層における）障害発生時のデータ復旧のためのバックアップという観点で捉えることもでき、以下のようなアプローチが存在します。

 * @<strong>{スナップショット} 定点におけるデータをバックアップファイルとして保存する機能

 * @<strong>{書き込みログ} RDBにおけるいわゆるWAL/REDOログ。Redisでは、AOF (Append Only File)と呼ばれます。

=== インメモリDB

 * @<strong>{Oracle Coherence}@<fn>{dee7910fc6a7f7780ac7831f794eda19}では、上記のデータ永続化パターン（リード/ライト・スルー、ライト・ビハインド）を想定した実装手法が確立されています。

 * @<strong>{Redis}@<fn>{522195171ed14f78e1f33f84a98f0de6}をキャッシュとして使い、ドキュメント指向データベースであるMongoDBと連携することによって、永続化を実現する手法が見られます。連携には、cdata社の CData Sync@<fn>{89abbd125f9fb071d8e485290dacbc26}を利用することができます。

=== 永続化機構を備えたインメモリDBとしてのCouchbase Server

これまで見たように、インメモリDBを利用する場合、通常データの永続化は、ユーザーの選択した方法によるインテグレーションにより実現されます。Couchbase Serverのユニークなところは、メモリ「ファースト」アーキテクチャの採用にあります。
ユーザーは、メモリ上のデータへのアクセス（ディスク利用による性能制約からの開放）による応答性能を享受しながら、データは、あたかもごく一般的なデータベースのように、ディスク上に保存されている状態が、「シングルプラットフォーム」で実現されています（ここで、「シングルプラットフォーム」といったのは、このようなキャッシュと永続化の両方を満たすための典型的なアーキテクチャーとして、キャッシュレイヤーと永続化レイヤーを二つの異なるテクノロジーによって実現するケースとの対照として）。

この場合、内部的な実装は、いわば「ライト・ビハインド」のパターンに相当しますが、一貫性(Durability)要件に応じ、ディスクおよび複製に対して、同期的に更新するオプションを提供しています（オプションの選択はAPIコール単位であり、システム全体で、ライト・スルーかライト・ビハインドかを固定する必要はありません）。

以下に、以上説明したアーキテクチャーのイメージを示します(画像は、Couchbase Under the Hood: An Architectural Overview@<fn>{9a6cce3336b02e30ca1fb60d9b70e9ad}より引用)。

//image[memory_first_arch][]{
//}

====[column]メモリキャッシュシステムとしてのCouchbase Server
Couchbase Serverは、Memcachedプロジェクトのメンバーにより開発されたMembaseをその前身としており、Memcachedのユースケースへの適応が意識されています。
そうした背景から、Couchbase Serverは、永続化要件のないデータを、メモリのみを利用して扱うこともサポートしています。
これは、「バケット」と呼ばれるデータ格納単位の作成時にEphemeral(一時的)バケットとして作成することによって実現されます。

ただし、本書では、Couchbase Serverのメモリキャッシュシステムとしての側面については基本的に取り扱いません。

====[/column]

== JSONデータベース

ここでは、なぜJSON（データベース）が重要なのかについて整理します。

=== JSONの特徴

まず、先行する技術であるXMLとの比較から、JSONの特徴を解き明かしてみたいと思います。

 * @<strong>{XML}: ユーザーが定義したタグを用いて文章構造を記述するマークアップ言語
 * @<strong>{JSON}: キーと値(文字列、数値、真偽値、配列)のペアの集まり（オブジェクト）によって、ユーザが定義した構造を持つデータを記述するデータ記述言語。名称と構文はJavaScriptにおけるオブジェクトの表記法に由来。

JSONとXMLに共通してみられる特徴として、以下があります。

 * データ記述言語（データ記述言語は、マークアップ言語を包含する概念）として、データと同時に、データの意味と構造を記述することができる
 * テキストベースのデータ交換用フォーマット
 * データ構造として、ツリー構造を持つ。ツリー構造は、ネットワーク構造以外のほとんどのデータ表現のニーズに対応できる(RDBで用いられているテーブル構造や、キーと値のペア等、より単純なデータ構造は、ツリー構造に包含される）
 * プログラミング言語を問わず利用できる
 * 仕様が固まっており、十分な歴史・実績を持つ

さらに、XMLに対するJSONのメリットとして、以下があります。

 * XMLよりも軽量
 * プログラミング言語との親和性が高い。JSONは、JavaScriptに由来しており、辞書(マップ)や配列・リストのような多くのプログラミング言語がネイティブに持つデータ構造へ直接コンバートすることができる

=== JSONとモダンな開発・サービス形態との関係

XMLが（そして後にはJSONが）、広く浸透した理由として、その「テキストベースのデータ交換用フォーマット」という特徴が、WEB技術と親和性が高かったことが挙げられます。

「データ交換」のユースケースの中でも、特に重要だったのが、WEBブラウザー上での扱いだったといえます。WEBブラウザー上で実行可能なスクリプト言語の仕様として登場した、非同期更新技術(Ajax@<fn>{1a4091951f5fb1f307e2ee166df63c1d})は、WEBアプリケーションに、ネイティブアプリケーションと遜色のない、ユーザー体験を提供することを実現しました。この非同期更新技術のデータ交換フォーマットとして用いられたのが、当初はXMLであり、後にはJSONが、実質的に取って代わることになります。

その結果が、現在のSPA(シングルページアプリケーション)、PWA(Progressive web application)の隆盛につながっています。
そして、このような新しいUI技術（SPA@<fn>{4cbf4c2bb4d7602315f6b0d7af6745be}, PWA@<fn>{7421ae409426b8fcd3cb845fe195a411}）がなぜ重要かと言えば、ページビューの増加や離脱率の減少に、繋がるからに他なりません。

さらには、XMLにおいては広く浸透したとは言い難いデータ管理の目的においても、JSONは、そのデータ記述言語としての（これまでのデータ管理の主流であったRDBに遥かに勝る）柔軟性により、多くのデータベースにおいて、採用されることになりました。

=== 参考情報

ディーエムソリューションズ株式会社コラム PWA（Progressive Web Apps）とは？メリットと実装事例について@<fn>{bef41e78b4981370f88d07cbb1507da7}



== トランザクション今昔

ここでは、データベース技術者がNoSQL（ドキュメント指向データベース）に触れる際に、関心が深いと思われるトピックである「トランザクション」について、概観を整理していきます。

=== ドキュメント指向データベースにおけるトランザクション

ドキュメント指向データベースでは、トランザクションの原子性（Atomicity）は、ドキュメントという単位と一致しているということができます。
Couchbaseのドキュメント更新に対するアプローチとして、「get-and-lock API」で実現される悲観的（ペシミスティック）ロックと「check-and-set (CAS) API」による楽観的（オプティミスティック）ロックの二つがあります。

=== NoSQLとマルチドキュメントトランザクション

複数のレコード間を、外部キーによって関連づけることは、ドキュメント指向データベースであっても、採用しうる設計です。そのことを踏まえ、複数レコード/ドキュメントに跨がるトランザクションが必要なケースとして、次の二つについて考えてみます。

 * 複数の（関係のない）エンティティ間でのデータの受け渡し（例えば、口座間での送金）

 * 複数の（関係した）エンティティの同時更新（例えば、受注レコードと受注明細）

後者について言えば、ドキュメント指向データベースが扱う（準）構造化データでは、第一正規化が必須とされないため、必要なトランザクション境界を、１ドキュメントに含まれるデータの範囲と一致させる設計が可能だということが言えます。

その一方で、NoSQLが従来想定していた範囲を超えて、有益であることが認められてくるに連れて、複数ドキュメントに跨がるトランザクションの実現に対する要望も高くなっていったものと考えられます。

例えば、Couchbaseの過去のブログでは、トランザクションを表現するドキュメントを使うことによって、複数ドキュメントに跨がるトランザクションをアプリケーションとして実現する例が紹介されていたりもします。
NoSQLデータベースの制限をデータベース外部で解決するという試みは、様々な形で行われています（一例としてNECのInfoFrame Relational Store(IRS)@<fn>{66fe5150939f305857c0310ca092a9bc}があります）。

NoSQLに、マルチドキュメントトランザクションが、データベースの機能として実装された背景には、ドキュメント指向データベースのユースケースの範囲が、大きく変わってきていることが示唆されていると考えられます。

=== Couchbaseのマルチドキュメントトランザクション

Couchbase Serverのマルチ・ドキュメント・トランザクションは、あるバケットに含まれる複数ドキュメントに跨がることができます（さらには、異なるバケットに跨がることさえできます）。
一つの論理バケットは、物理的に複数ノードに跨がるので、トランザクションは、当然複数ノードに跨がることになります（NoSQLの世界でトランザクションの実現という時、分散アーキテクチャーとしてのクラスター内の複数のノード間のトランザクションという観点から語られることがあるため、注釈しておきます）。

ここで注意しなければならないのは、Couchbase Serverのマルチドキュメントトランザクションは、楽観的平行性制御に基づくものであって、ここでは、上で触れた単一ドキュメント更新時のように、悲観的ロックを選択することはできないことです。

=== NewSQL

「@<strong>{New}SQL」と呼ばれる新しいデータベースの登場は、現在におけるNoSQLの位置づけを見極める上でも、非常に興味深いものだと考えます。以下の図をここで引用することは、その意味で、意義深いと思われます。

//image[newsql][]{
//}

画像は、 NoSQL, NewSQL and Beyond@<fn>{90234a6d1bc62d7f4d443da72a796c21} より引用

NewSQLについての詳細な説明は、上記図の引用元や、その他の文献に譲りたいと思いますが、端的にいえば、
Google Spanner@<fn>{f330266e643fbd2b7d2a10960b35a423}とそのクローンを差すものと考えて良いかと思います（ここでは、その解釈とします）。その特徴について要約すれば、分散アーキテクチャー（のメリット）を持ち（NoSQLから引継ぎ）ながら、あくまでRDBであること（つまり、トランザクションとSQLを備えていること）を打ち出しているように見えます。例えば、Google Spannerについては、「Fully managed relational database with unlimited scale, @<strong>{strong consistency}, and up to 99.999% availability.」と謳われています。
クローンごとに若干打ち出し方が異なっているのは、CouckroachDB@<fn>{d6032cdd340139ba8d35f5aec7d0d61e} では、「strong consistency」という技術的特徴を「@<strong>{mission-critical}」という目的の形で表現している一方、TiDB@<fn>{d9883eb51d84bd0f4bfe3bafca1931b5} は、「distributed SQL database for elastic scale and @<strong>{real-time analytics}」と定義しています。YugaByteDB@<fn>{e968a7936c71fff2010123dc01af46ab} は、「@<strong>{Single-Digit Millisecond Latency}」を筆頭に挙げているのも興味深いところです。

トランザクションという点についていえば、Couchbase Serverが、後天的に獲得した複数レコード/ドキュメント間のロックという特徴が、リードコミッテッドのトランザクションレベルに基づいている一方、NewSQLのロックは、より厳格であること（シリアライザブルのトランザクションレベル）が大きく異なっています。これは、SQLが使えることと並び、NewSQLを「(New)SQL/RDB」として位置付けている重要な特徴と言えるでしょう。Couchbase　Serverとの比較で言えば、SQL(拡張)クエリが使えるところは共通している一方で、明らかに異なる特徴が、このトランザクションの設計ということになります。

=== 楽観的ロックの何が問題か

楽観的ロックの何が問題か、以下の二点に集約して考えてみたいと思います。

 * トランザクション競合発生時の対応がリトライに基づくため、最終的に（集中時には）性能の問題に帰結する場合がある。

 * 悲観的ロックに基づくRDBでの開発を常識としてきた開発者にとって、これまでの流儀を全く変えずに開発ができるわけではない

高いトランザクションレベル（悲観的ロック）を取ることが絶対に重要で、システムに必要な要件であるユースケースがある一方（その場合、メリット・デメリットを比較する必要さえないため、ここでは必ずしもそのことを前提としないケースについて検討します）、前者の欠点は、アプリケーション全体において、トランザクション/ロックの要件が必要である場合、それ自体単体で見た場合悲観的ロックと比較して軽量な処理であるはずの、楽観的ロックの実装を利用した場合、問題となりうることを示しています。
後者については、一概に結論付けられるような内容ではなく、コストや、アークテクチャー的なアドバンテージなども考慮された上で、判断が必要になるところだと思われます。

=== 参考情報

Couchbase公式ドキュメント Transactions@<fn>{9db0bd53e622fbfb25b6746dc5604776}

Couchbaseブログ Optimistic vs Pessimistic Locking -- Which One Should You Pick?@<fn>{cf3d5fa42e3685b9552b8630edc07c55}

Couchbaseブログ Couchbase Brings Distributed Multi-Document ACID Transactions to NoSQL@<fn>{b0d8e878210f45b315d30ab3106b7a0e}

Couchbaseブログ Understanding Distributed Multi-document ACID Transactions in Couchbase@<fn>{d2d87c2fb49681980479824d0e447353}



== 第一正規化制約を超えて

=== NoSQLのカテゴリーについて

NoSQLデータベースの世界では、JSONを扱うデータベースは、「ドキュメント指向データベース（ドキュメントストア）」と呼び習わされてきました。「ドキュメント」は普通名詞としてあまりに一般的すぎるため、「準構造化データベース」とでも呼んだ方が、実態をよりよく表現する(あるいは、ドキュメント指向データベースは、ドキュメント形式のデータを扱うが、ドキュメント形式のデータとは、JSONやXMLのような半構造化データである、という定義よりも直接的)ということができます。

=== 「準（半）構造化データ」という呼称について

「semi-structured data」という用語には、暗にstructured(構造)イコール、リレーショナルデータベースのテーブル形式、ということが含意されている、と解釈できます。
「構造」という言葉を素直に受け止めるのであれば、これはリレーショナルデータベースに対する行き過ぎた偏向であって、テーブル形式でないデータも、紛れもなく「構造」を持っているといえます。

テーブル形式は、リレーショナルデータベースにデータを格納する際の制約である、第一正規化を強制された構造、ということができ、その意味では、「準構造化データ」というよりも、「非第一正規化形データ」とでも呼ぶ方が、実態を表しているのではないでしょうか？(ここでの疑問形は、既に流通している用語の変更を訴えるためではなく、そうした地点から考えてみることを示唆する目的から使われています)

=== Couchbase ServerとRDBとの比較

Couchbase Serverには、スコープとコレクションという、RDB(Oracle)における(ユーザー)スキーマとテーブルに相当する概念(キースペース)が存在します。
Couchbase Serverのコレクションは、RDBにおけるテーブルのように、データの種類(エンティティ)を表現することができますが、RDBにおけるテーブルとは異なり、データ構造を制約するものではありません。

そして、RDBのテーブルに格納されるデータの条件である、第一正規化形データは、準(半)構造化データに包含されます。

このように、Couchbase Serverは、データのエンティティの関する表現を持ち、第一正規化形データを難なく扱えることから、RDBのデータ(モデル)をCouchbase Serverに移行(応用)することは、造作なく行えます。
そして、この関係は非可逆であると言えます。つまり、JSONは第一正規化形データを表現することができ、また、スキーマレスであることは静的なスキーマを問題視しませんが、その逆は成り立ちません。こうした点を踏まえ、「RDBのスーパーセットとしてのCouchbase Server」について考えてみることができます。

=== RDBのスーパーセットとしてのCouchbase Server

Couchbase Serverのクエリ言語には、N1QL (Non-1st-normarization-form Query Language)という名称が付けられています。
N1QLでは、SQLをベースに、JSON固有の要素、配列やネストされたデータ構造に対して、構文が拡張されています。視点を変えれば、JSON固有の要素が存在しない場合、RDBで使われているものと同じクエリの表現を使うことができるといえます。

そうした面からも、Couchbase ServerはRDBのスーパーセットである、ということが言えるかもしれません(もっとも、データ形の種類についてJSONはSQL標準よりも限定されており、Couchbase Serverの複数のドキュメントに跨がるトランザクションは、RDBよりも限定的であることは覚えておく必要がありますが)。

依然として存在する様々な違いに関わらず、このような表現を用いたのには、NoSQLという名称が、RDBへのアンチテーゼとしての意味合いを持ち、NoSQLデータベース一般がそうしたものとして目されている、という背景に対して、行き過ぎを正す意図があります。多くのNoSQLが、RDBと異なるユースケース(ビッグデータや分析)で使われているのに対して、Couchbase Serverは、インタラクティブなアプリケーションのバックエンドデータベースとして、設計・最適化されています。これはRDBの主要なユースケースと共通であるといえます。

//footnote[meti_go_jp_dx][https://www.meti.go.jp/press/2019/07/20190731003/20190731003-1.pdf]

//footnote[1433ffe25ca932a2c5c0242cfc86b3e3][https://www.cdata.com/drivers/couchbase/]


//footnote[dee7910fc6a7f7780ac7831f794eda19][https://coherence.community/]

//footnote[522195171ed14f78e1f33f84a98f0de6][https://redis.io/]

//footnote[89abbd125f9fb071d8e485290dacbc26][https://www.cdata.com/jp/kb/tech/redis-sync-mongodb.rst]

//footnote[9a6cce3336b02e30ca1fb60d9b70e9ad][https://resources.couchbase.com/c/server-arc-overview?x=V3nd_e]

//footnote[1a4091951f5fb1f307e2ee166df63c1d][https://ja.wikipedia.org/wiki/Ajax]

//footnote[4cbf4c2bb4d7602315f6b0d7af6745be][https://ja.wikipedia.org/wiki/%E3%82%B7%E3%83%B3%E3%82%B0%E3%83%AB%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3]

//footnote[7421ae409426b8fcd3cb845fe195a411][https://en.wikipedia.org/wiki/Progressive_web_application]

//footnote[bef41e78b4981370f88d07cbb1507da7][https://digital-marketing.jp/seo/what-is-progressive-web-apps/ 新しいUI技術（SPA, PWA）が、ページビューの増加や離脱率の減少へ与える影響について、具体的な数字を交えて紹介されています。]

//footnote[66fe5150939f305857c0310ca092a9bc][https://jpn.nec.com/infoframe/relationalstore/docs/irs_couchbase_live_tokyo_2015.pdf]

//footnote[90234a6d1bc62d7f4d443da72a796c21][https://www.infoq.com/news/2011/04/newsql/]

//footnote[f330266e643fbd2b7d2a10960b35a423][https://cloud.google.com/spanner]

//footnote[d6032cdd340139ba8d35f5aec7d0d61e][https://www.cockroachlabs.com/]

//footnote[d9883eb51d84bd0f4bfe3bafca1931b5][https://pingcap.com/]

//footnote[e968a7936c71fff2010123dc01af46ab][https://www.yugabyte.com/]

//footnote[9db0bd53e622fbfb25b6746dc5604776][https://docs.couchbase.com/server/current/learn/data/transactions.html]

//footnote[cf3d5fa42e3685b9552b8630edc07c55][https://blog.couchbase.com/optimistic-or-pessimistic-locking-which-one-should-you-pick/]

//footnote[b0d8e878210f45b315d30ab3106b7a0e][https://blog.couchbase.com/couchbase-brings-distributed-multi-document-acid-transactions-to-nosql/]

//footnote[d2d87c2fb49681980479824d0e447353][https://blog.couchbase.com/distributed-multi-document-acid-transactions-in-couchbase/]
