
= Sync Gateway運用


== オフライン/オンライン制御

Sync Gatewayが接続しているCouchbase Serverデータベース(以下、データベース)のオフライン/オンライン制御(Take Database Offline/Online@<fn>{database-offline})について解説します。

//footnote[database-offline][https://docs.couchbase.com/sync-gateway/3.0/database-offline.html]

=== 概要


Sync Gatewayでは、Sync Gatewayインスタンスを停止することなく、クライアントからのデータベースへのアクセスをオフラインにしたり、その後再度オンラインに戻したりすることができます。
このオンライン/オフライン制御は、管理REST APIの機能として提供されます。

データベースをオフラインにすることによって、Sync Gatewayはクライアントからのそのデータベースに関するリクエストを受け付けなくなりますが、Sync Gatewayとデータベース間の接続が失われる訳ではありません。

反対に、Sync Gatewayがデータベースに接続できなくなった場合には、Sync Gatewayはそのデータベースを自動的にオフラインにします。
この場合、データベースとSync Gatewayとの間に発生した問題を修正した後、Sync Gatewayを再起動することなく、REST APIコールにより、そのデータベースとの接続をオンラインにすることができます。

デフォルトでは、Sync Gatewayが起動すると、データベース構成プロパティに従って、Sync Gatewayとデータベースとの接続がオンラインになります。
Sync Gatewayの起動時にデータベースをオフラインにしておきたい場合は、@<tt>{offline}構成プロパティをデータベース構成プロパティに追加します。

なお、データベースのオンラインまたはオフラインのステータス変更は、ステータス変更リクエスト先の特定のSync Gatewayノードでのみ発生します。
Sync Gatewayクラスターの他のノードには反映されません。


=== ユースケース

このようなオフライン/オンライン制御機能が提供されている理由の一つとして、Sync Gatewayでは複数のデータベース用に構成することができるため、それぞれのデータベースの運用を個別に行う手段が提供されていると言えます。

あるいは、Sync Gatewayが、ただ一つのデータベース用に構成されている場合に、クライアントに対してはオフラインにしておきながら、Sync Gatewayとデータベースの接続を維持しておく、Sync Gateway特有の理由として、再同期があります。
この再同期については、後に説明します。

=== エンドポイント

管理REST APIは、オンライン/オフライン制御用の以下のエンドポイントを提供しています。

//blankline

 * @<tt>{/{db\}/_offset}: データベースをオフラインにする。
 * @<tt>{/{db\}/_online}: データベースをオンラインにする。

=== 起動時設定


== 再同期

=== 概要

Sync GatewayのSync関数は、ドキュメントのユーザーへのルーティング及び、アクセス制御設定に関係しています。
アプリケーションの仕様変更等に伴い、Sync関数を変更する場合、既存のドキュメントに対して変更後のSync関数を実行し、仕様変更後のルーティングやアクセス制御設定を適用する必要が生じる場合があります。
このように、通常のドキュメント更新のタイミングではなく、既存のドキュメント全体に対してSync関数を実行することを、@<em>{再同期}(Resync@<fn>{resync})と呼びます。
再同期を実行するには、データベースをオフラインにする必要があります。


=== エンドポイント

管理REST APIは、再同期用のエンドポイント@<tt>{/{db\}/resync}を提供しています。
このエンドポイントは、データベース内のすべてのドキュメントに対するSync関数の適用をトリガーします。
このエンドポイントの応答メッセージには、再同期を実行した結果として行われた変更の数が含まれます。

//footnote[resync][https://docs.couchbase.com/sync-gateway/current/resync.html]


=== 再同期の要否

Sync関数定義への変更が、ドキュメント更新時における検証ロジックに関するもののみであり、ルーティングやアクセス権限設定には影響しない場合、再同期操作を実行する必要はありません。

なお先述の通り、再同期操作は管理REST APIコールとして行われるため、Sync関数の実行コンテキストは@<tt>{admin}ユーザーになります。
そのため、Sync関数内で書き込み操作を制御するために、@<tt>{requireUser}、@<tt>{requireAccess}および@<tt>{requireRole}といったSync関数APIを使用している場合、APIコールは常に成功します。

また、Sync関数の中でルーティングやアクセス権限設定を変更している場合であっても、Sync関数の変更以降に作成されたドキュメントに関してのみそれらのルールを適用したい場合は、当然ながら再同期操作を実行する必要はありません。

=== アクセス権削除における留意点

Sync関数を変更してユーザーのドキュメントへのアクセスを取り消す場合、新しい設定は、そのドキュメントの新しいリビジョンがSync Gatewayに保存されたときにのみ有効になります。
再同期操作を実行しても、ドキュメントの現在のリビジョンへのアクセスは取り消されません。

=== クラスター構成における留意点

複数のSync Gatewayノードからなるクラスター環境では、再同期の実行は一つのノードでのみ行います。

再同期の前後で、Sync関数の更新に伴う変更が、全てのノードで一貫性が保たれている必要があります。
再同期を実行するには、データベースをオフラインにする必要がありますが、クラスター環境では、全てのノードでデータベースをオフラインにする必要があることに注意が必要です。
この際、特に支障がなければ、他の全てのノードのSync Gatewayプロセスを停止することも考えられます。

データベースの再同期が完了した後、必要に応じ他のノードのプロセスを開始し、全てのノードでデータベースをオンラインにします。

=== 影響とワークアラウンド

再同期を実行するには、データベースをオフラインにする必要があるため、アプリケーションのダウンタイムが発生します。

再同期は、データベース内のすべてのドキュメントを処理する必要があるため、リソースコストが高く、ドキュメント数に応じて時間を要する操作になります。

再同期中に、可能な範囲でサービスの提供を維持するためのワークアラウンドとして、事前にデータベース(バケット)の読み取り専用コピーを作成してから、そのバケットとセカンダリーSync Gatewayを使って読み取りのみのサービスを提供することが考えられます。
そして、再同期が完了したら、プライマリーのSync Gatewayに切り替えます。
