= プロローグ：データベース選択を巡る対話

ここはある技術系ミートアップ会場、有志によるLT(ライトニングトーク)が行われた後のフリータイム、各所で思い思いの会話がなされています。その一角で、また新しい対話が始まります。

「先ほど発表された内容、とても勉強になりました。」

「ありがとうございます。あなたの新しいアプリケーションの構想も、なかなか興味深かったですよ。」

「そうですか！まだ、全然アイディアでしかないんですけどね。ところで、少し相談させてもらってよいですか？」

「自分でよければ。私がLTで話した内容に関係してますか？」

「はい。といっても、かなり漠然とした相談になってしまうのですが、実は先ほど発表したアプリケーションのプロトタイプを作るに当たって、どのデータベースを使おうか悩んでいます。データベースについて、広い知見をお持ちのようでしたので。」

「広いかどうかは分からないけど。どんな部分で悩んでいますか？右も左も分からないという感じではないですよね。」

「あまり深く考えずに、とりあえず作り始めるとしたら、何か適当なRDBを使うと思うんですよね...」

「はい。」

「プロトタイプを作っている間、データ構造については試行錯誤すると思うんです。それだけなら、都度、テーブル定義を修正しながら進めても良いのですが...」

「ふんふん」

「プロトタイプとは言っても、ドメインエンティティが素直に反映された設計の、可読性と保守性の高いコードを維持したいんです。これはマストで！」

「分かります。」

「それで、ORM(オブジェクトリレーショナルマッピング)についても考え始めると、特定の技術への偏りと、そのための負担が、煩わしくなってくるんですよね。」

「そういうことですね。今の話を聞くと、既に何かRDB以外で検討しているのじゃないかと思うんですが、どうですか？」

「はい。ドキュメント指向データベースというんですか、JSONドキュメントを保存できるデータベースなら、アプリケーションで扱っているエンティティと同じ構造のデータを保存できるのではないかと思ったんですが...」

「そうですよね。だけど？」

「それはそれで実際に実装を始めようとすると、また別の技術的な偏向というか、負担が気になるんですよね...」

「そうですね、データ構造はJSONとして一般性があるけれど、プログラミングインターフェイスについては、SQLのように標準化されているわけではないですからね」

「そうなんです！仕方がないんですかね？」

「それでは、まず確認ですが、クラウド利用については、どう考えていますか？」

「もちろん、いずれクラウドは有効に活用したいと思っていますが、現時点では、特定のクラウドベンダーに縛られるような形は取るつもりはなくて、開発中は、コンテナは使うかもしれませんが、ラップトップで完結させたいと思っています。」

「それでは、クラウドベンダー独自の技術は自ずと除外されるとして...Couchbaseって聞いたことありますか？」

「う〜ん、正直名前だけは聞いたことがあるような無いような...Apacheプロジェクトでしたっけ？」

「いや、Apache CouchDBというのはあるけど、それとは別で、やはりオープンソースのデータベースです。」

「それで混乱したのかもしれません。Couchbaseについては何も知らないものとして、教えていただけますか？」

「まずは、JSONドキュメントを扱うドキュメント指向データベースの中でも、多くのプラットフォームで稼働する、オープンソースのテクノロジーであるということ...」

「はい、それは私の希望しているところでもあります。」

「あとは、ご相談を聞いて、Couchbaseのことを考えたのは、SQLを使えるところ...」

「そこをもう少し詳しく教えてもらっても良いですか？いろいろなRDB以外のデータベースが、クエリを使えると謳っていて、少し調べると、なんだか...」

「期待していたものと違う。」

「そうなんです。よく理解できていないだけなのかもしれませんが...あるいは逆の形で、昔からあるRDBがJSONに対応した、というケースもありますよね。どちらも、なんだか、しっくりこないんです。」

「SQLをJSON用に拡張する時の一つの形としてはJSONを扱うための関数を追加する、というものがあります。この場合、純粋なSQLのシンタックスが保持される代わりに、開発者が期待していたるものギャップが生じる面があるのではないかと思います。」

「はい。」

「一方で、関数の追加というレベルでなく、SQLのシンタックス自体をJSONデータ構造へのクエリに対して拡張するというアプローチがあります。」

「対照的ですね。」

「JSONのデータ構造として、例えば、配列や、ネストされたデータが扱えるということがありますよね。」

「はい、分かります。」

「これまで、期待していたものと違う、とかギャップが生じるとか、具体的なことを言わずに進めてきましたが、何が一番、ギャップとして大きいと感じていますか？」

「そうですよね。当然の質問だと思うんですが、正直、よく説明できないんです...」

「意地悪な質問だったかもしれませんね。実際、自分にとっても、直感的なものではあるのですが、データ構造云々というよりも、端的に言って、データを結合できるかどうか、の部分に開発者にとっての期待値とのギャップがあるんじゃないかと思うんですよね。JSONの構造という話から離れるようにも思うかもしれませんが」

「いえいえ、何となく分かるような気がします。」

「ネストした構造を持てるからと言って、関係する全てのエンティティを一つのドキュメントとして保存するのは現実的でないですよね。それに、一意のキーでデータ間の関係を表現するのはRDBのお家芸かもしれませんが、JSON含め、他のデータ構造でも、なんの問題もなく表現可能ですよね。技術的に結合してデータを取り出せるかかどうかが問題となるだけで。」

「確かに。」

「その点、CouchbaseのN1QL(ニッケル)は、データ設計者でもあるようなアプリケーション開発者が、期待していることを実現していると思います。」

「ニッケル、ですか？」

「Couchbaseのクエリの呼称です。Non-1st-normalization-form Query Languageの略で、N1QLと書いて、ニッケルと読みます。」

「なるほど。JSONは、RDBのように第一正規化が強要されないから、非第一正規化形クエリ言語、というわけですね。」


「そうそう。今、強要されない、と言われたように、逆に第一正規化しても何の問題もない、というのが結構重要だと思います。」

「確かに。それもクエリの際に結合がどの程度実現されているかどうか、という部分に掛かってくるということですね。」

「そうです。例えば、既存のリレーショナルデータベースで扱っているのと完全に同じ構造のデータをJSONデータとしてCouchbaseで管理した上で、SQLと全く同じクエリを使うといったことも可能です。」

「何となく、技術的に偏った方向に振れすぎる、というような心配を解消してくれそうな気がしてきました。」

「うん、極端な話、Couchbaseでプロトタイプを作った後、RDBに移行するというようなことも、そんなに非現実的ではないと思いますね。メリットがあるかどうかは別として。」

「そういうことなんです。実際にそうするかどうかということでなく、そういうことも考えられるくらい、標準的な知識の上に成り立っているかどうか、というのがポイントだと思っていました。」

「標準という意味では、SQL++という半構造化データへのクエリに関する標準規格があって、N1QLもそれを意識して、進化しています。ApacheプロジェクトにもAsterixDBというSQL++を採用しているデータベースがあります。」

「それは、悪くない情報ですね。」

「ご相談に直接関係する部分としては、こんな所ですかね。お役に立てたでしょうか？」

「はい、ありがとうございます。」

「あとは、Couchbaseを使ったNODE.jsのサンプルアプリケーションがありますが、見てみますか？」

「是非みてみたいです。」

「ちょっと待ってください。（ラップトップを開いて、Node.jsアプリケーションを起動する）画面はこんな感じです。単純なユーザー管理のアプリケーションです。」

「これくらい簡単な方がすぐにイメージし易いです。」

「これがソースです。」

「ユーザーのリスト表示で使っているクエリがこれですね。確かにSQLですね。」

「登録されているユーザーの表示の他は、ユーザーの追加と削除だけしか実装していませんが、それはこの辺りです。」

「ふうん。INSERTやDELETEのクエリを使うわけではないんですね。」

「N1QLで、それらを使うこともできるけどね。一意のキーで特定されるデータを扱うだけなら、わざわざクエリを文字列で渡して、サーバでそれを解析して実行計画を作成する必要はないということですね。

「RDBっぽくはないけど、ORMを使っている時と似ているかもしれない。」

「こういう部分、ORMではSQLを隠しますよね。ここではそういったラッパーを介しているわけではないので、リソース消費の上でも、知識習得の面でも、余計なオーバヘッドを避けることができている、と言えるんじゃないかな。

「本当ですね。」

「反対に、検索条件を指定してデータを取得する場合は、SQL表現の方が開発者にとって直感的なのにも関わらず、ORMを使うために、いわばアンビバレンツな状況に見舞われる、ということも言えるんじゃないかと思います。」

「分かる気がします。私も、そんな感じで、RDBとORMで進めることに二の足を踏んでいたのかもしれません。コードを見せていただいたので、具体的にイメージが掴むことができました。コード量もこれだけで、他に特別なライブラリを使っているのでもないということですよね？」

「そうですね。必要なのはCouchbaseを習得するだけで、その基本は、今見てきたN1QLと、幾つかの直接のデータ操作のためのAPIということですね。」

「これ以上、複雑なことをする場合も、基本的にN1QLでの操作になって、SQLが分かっていれば、大丈夫そうですね。」

「大丈夫そうですか？」

「はい、いい感じです。シンプルなのが、良いですね。」

「そうだね。これぐらいシンプルだと、さっきも言ったけど、本格的な開発になった時に、RDBや他のデータベースを使うことにしても、手戻りはそんなにない、と言えるかもしれないね。」

「それは、本格的な開発では、そのまま使い続けない方が良いということでしょうか？」

「いやいや、あくまでプログラム設計としてはできるだけ特定の技術に依存しないよう、抽象化されているのが良い、という話の流れでのコメントですよ。RDBよりも後続の技術として、他のNoSQLやNewSQLデータベースと同じように、複数のノードからなるクラスターとしての利点もあるし、性能面で、ディスクの性能がボトルネックにならないメモリを有効活用したアーキテクチャーが採用されていたり、そのまま本番サービスで活用する場合のアドバンテージも大きいと思いますね。」

「ああ、それ！そのクラスターというところなんですが...やっぱり構築とか大変ですよね？」

「全然！Couchbaseの良いところは、1台で全てのサービスを動かしても、複数台で分散構成をとっても、論理的には変わらないというところです。つまり、開発用にラップトップで動かしていても、スタンバイモードと言ったような特殊なモードで動いているわけではないので、データベースをより本格的な環境に移行した後でも、アプリケーション側をなんら変更する必要がないということですね。付け加えるなら、インストールとセットアップも驚くほど簡単です。」

「それを聞いて、やってみようというハードルが低くなりました。」

「よかったです。他に気になるところありますか？」

「大丈夫です。とりあえず、触ってみて、それからかな。」

「そうですね。それじゃあ、私からも良いですか？」

「何でしょう？」

「発表されていたサービスについて、聞いてみたいことがあるんですが...」

「何でも聞いてください！」

会話はさらに続くようです。それぞれの関心を交差させながら...